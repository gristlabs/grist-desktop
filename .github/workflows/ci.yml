name: CI
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - dev
    tags:
      - '*'

env:
  FORCE_COLOR: 1

jobs:
  test-windows-x86-sqlite3:
    runs-on: windows-2022
    name: Test Windows x86 sqlite3 build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Submodule cleanup fix
        run: |
          git submodule foreach --recursive git clean -ffdx
          git submodule foreach --recursive git reset --hard

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: yarn install --network-timeout 300000 --ignore-optional

      - name: Test multiple approaches for Windows x86 sqlite3 build
        shell: bash
        run: |
          echo "=== Testing multiple approaches for Windows x86 sqlite3 build ==="
          
          # Set up common environment variables
          export npm_config_build_from_source=true
          export npm_config_target_arch=ia32
          export npm_config_target_platform=win32
          export npm_config_target_libc=msvcrt
          export npm_config_fallback_to_build=true
          export npm_config_msvs_version="2022"
          
          # Function to check build result
          check_build() {
            local approach_name="$1"
            echo "=== Checking $approach_name result ==="
            
            # Check in both possible locations
            local binding_file=""
            if [ -f "node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-ia32/node_sqlite3.node" ]; then
              binding_file="node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-ia32/node_sqlite3.node"
            elif [ -f "core/node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-ia32/node_sqlite3.node" ]; then
              binding_file="core/node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-ia32/node_sqlite3.node"
            fi
            
            if [ -n "$binding_file" ]; then
              echo "✅ SUCCESS ($approach_name): Windows x86 sqlite3 binary found at $binding_file!"
              
              # Test if it actually loads
              if node -e "const sqlite3 = require('@gristlabs/sqlite3'); console.log('SQLite3 version:', sqlite3.VERSION);" 2>/dev/null; then
                echo "✅ FULLY WORKING ($approach_name): SQLite3 loads and works!"
                return 0
              else
                echo "⚠️  PARTIAL SUCCESS ($approach_name): Binary exists but doesn't load properly"
              fi
            else
              echo "❌ FAILED ($approach_name): Expected binary not found"
              echo "Available bindings in root:"
              ls -la "node_modules/@gristlabs/sqlite3/lib/binding/" 2>/dev/null || echo "No root bindings directory"
              echo "Available bindings in core:"
              ls -la "core/node_modules/@gristlabs/sqlite3/lib/binding/" 2>/dev/null || echo "No core bindings directory"
              
              # Check for unknown platform
              if [ -f "node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-unknown-ia32/node_sqlite3.node" ] || [ -f "core/node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-unknown-ia32/node_sqlite3.node" ]; then
                echo "⚠️  Found 'unknown-ia32' binary - platform detection issue"
              fi
            fi
            return 1
          }
          
          # Clean function
          clean_bindings() {
            echo "Cleaning existing bindings..."
            rm -rf node_modules/@gristlabs/sqlite3/lib/binding/* 2>/dev/null || true
            rm -rf node_modules/@gristlabs/sqlite3/build 2>/dev/null || true
            rm -rf core/node_modules/@gristlabs/sqlite3/lib/binding/* 2>/dev/null || true
            rm -rf core/node_modules/@gristlabs/sqlite3/build 2>/dev/null || true
          }
          
          # APPROACH 1: node-pre-gyp with proper module_name variable
          echo "=== APPROACH 1: node-pre-gyp rebuild with proper module_name ==="
          clean_bindings
          npx node-gyp install --arch=ia32 || true
          
          # Try core directory first
          if [ -d "core/node_modules/@gristlabs/sqlite3" ]; then
            cd core/node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npx node-pre-gyp rebuild --target_arch=ia32 --target_platform=win32 || true
            cd ../../..
          elif [ -d "node_modules/@gristlabs/sqlite3" ]; then
            cd node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npx node-pre-gyp rebuild --target_arch=ia32 --target_platform=win32 || true
            cd ../..
          else
            echo "❌ Cannot find @gristlabs/sqlite3 directory"
          fi
          if check_build "Approach 1"; then exit 0; fi
          
          # APPROACH 2: Direct node-gyp rebuild in sqlite3 directory
          echo "=== APPROACH 2: Direct node-gyp rebuild in sqlite3 directory ==="
          clean_bindings
          npx node-gyp install --arch=ia32 || true
          
          if [ -d "core/node_modules/@gristlabs/sqlite3" ]; then
            cd core/node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npx node-gyp rebuild --arch=ia32 || true
            cd ../../..
          elif [ -d "node_modules/@gristlabs/sqlite3" ]; then
            cd node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npx node-gyp rebuild --arch=ia32 || true
            cd ../..
          else
            echo "❌ Cannot find @gristlabs/sqlite3 directory"
          fi
          if check_build "Approach 2"; then exit 0; fi
          
          # APPROACH 3: yarn upgrade with environment variables
          echo "=== APPROACH 3: yarn upgrade with environment variables ==="
          clean_bindings
          export module_name=node_sqlite3
          yarn upgrade @gristlabs/sqlite3 --no-lockfile 2>&1 | grep -v "Skipping copying" || true
          if check_build "Approach 3"; then exit 0; fi
          
          # APPROACH 4: npm rebuild in sqlite3 directory
          echo "=== APPROACH 4: npm rebuild in sqlite3 directory ==="
          clean_bindings
          
          if [ -d "core/node_modules/@gristlabs/sqlite3" ]; then
            cd core/node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npm rebuild --arch=ia32 || true
            cd ../../..
          elif [ -d "node_modules/@gristlabs/sqlite3" ]; then
            cd node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npm rebuild --arch=ia32 || true
            cd ../..
          else
            echo "❌ Cannot find @gristlabs/sqlite3 directory"
          fi
          if check_build "Approach 4"; then exit 0; fi
          
          # APPROACH 5: Manual binding setup with node-gyp
          echo "=== APPROACH 5: Manual binding setup ==="
          clean_bindings
          npx node-gyp install --arch=ia32 || true
          mkdir -p node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-ia32 || true
          mkdir -p core/node_modules/@gristlabs/sqlite3/lib/binding/napi-v6-win32-ia32 || true
          
          if [ -d "core/node_modules/@gristlabs/sqlite3" ]; then
            cd core/node_modules/@gristlabs/sqlite3
            export target_platform=win32
            export target_arch=ia32
            export target_libc=msvcrt
            export module_name=node_sqlite3
            npx node-gyp rebuild --arch=ia32 --target_platform=win32 || true
            cd ../../..
          elif [ -d "node_modules/@gristlabs/sqlite3" ]; then
            cd node_modules/@gristlabs/sqlite3
            export target_platform=win32
            export target_arch=ia32
            export target_libc=msvcrt
            export module_name=node_sqlite3
            npx node-gyp rebuild --arch=ia32 --target_platform=win32 || true
            cd ../..
          else
            echo "❌ Cannot find @gristlabs/sqlite3 directory"
          fi
          if check_build "Approach 5"; then exit 0; fi
          
          # APPROACH 6: Force manual platform setup with node-gyp configure
          echo "=== APPROACH 6: Manual node-gyp configure ==="
          clean_bindings
          npx node-gyp install --arch=ia32 || true
          
          if [ -d "core/node_modules/@gristlabs/sqlite3" ]; then
            cd core/node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npx node-gyp clean || true
            npx node-gyp configure --arch=ia32 --target_platform=win32 --msvs_version=2022 || true
            npx node-gyp build || true
            cd ../../..
          elif [ -d "node_modules/@gristlabs/sqlite3" ]; then
            cd node_modules/@gristlabs/sqlite3
            export module_name=node_sqlite3
            npx node-gyp clean || true
            npx node-gyp configure --arch=ia32 --target_platform=win32 --msvs_version=2022 || true
            npx node-gyp build || true
            cd ../..
          else
            echo "❌ Cannot find @gristlabs/sqlite3 directory"
          fi
          if check_build "Approach 6"; then exit 0; fi
          
          echo "=== ALL APPROACHES FAILED ==="
          echo "Final diagnostic information:"
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "yarn version: $(yarn --version)"
          echo "Architecture: $PROCESSOR_ARCHITECTURE"
          echo "Platform: $Platform"
          echo "Available bindings after all attempts:"
          find . -name "*.node" 2>/dev/null || echo "No .node files found"
          echo "SQLite3 package locations:"
          find . -name "@gristlabs" -type d 2>/dev/null || echo "No @gristlabs directories found"
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          exit 1
